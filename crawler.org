#+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} _:{} -:t f:t *:t <:t
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+STYLE: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg-classic.css" />

* Основная идея
  Необходимо собрать все задачи с [[http://acm.timus.ru/problemset.aspx][timus.ru]]
  и представить их в виде org-файла (timus.org).
  - Структура каждой задачи должны быть вида:
    #+begin_src org
      ,* {TODO|DONE} имя-задачи                                        :сложность:
        текст задания

        org-babel вставка с curl-запросом отправки текстового файла tasknum_timus.py
    #+end_src

  - Создать для каждой задачи файл tasknum_timus.org с содержанием
    #+name: tasknum_timus
    #+begin_src org
      Текст задачи

      ,#+name: имя_задачи
      ,#+begin_src python :results output :shebang "#!/usr/bin/env python3" :tangle $tasknum_timus.py

      ,#+end_src

    #+end_src
  - Ключ для обновления только основного файла, не трогающий файлы решений

* Реализация
  Даные мы будем получать со страницы с таблицей задач
  #+name: crawler
  #+begin_src python :shebang "#!/usr/bin/env python2" :results output :tangle crawler.py :exports code :noweb yes
    import re
    import os
    import urllib
    import urllib2
    import logging
    from lxml import html
    from cookielib import CookieJar, Cookie

    TIMUS_URL = "http://acm.timus.ru/"
    TASKS_URL = TIMUS_URL + "problemset.aspx?page=all"
    AUTH_URL = TIMUS_URL + "authedit.aspx"
    PROBLEM_URL = TIMUS_URL + "problem.aspx"
    CONFIG_PATH = "./crawler.conf"
    OPENER = None

    with open('./template.org', 'r') as template_file:
        template = template_file.read()

    <<logging>>

    <<objects>>

    <<get_secrets>>

    <<get_task_line>>

    <<get_cookies>>

    <<get_data>>

    <<to_xml>>

    <<get_content>>

    <<create_tasks_list>>

    <<create_org>>
  #+end_src

  Подготовим возможность логгировать ход выполения нашего скрипта
  #+name: logging
  #+begin_src python
    logging.basicConfig(filename='/tmp/logfile.txt', level=logging.DEBUG,
                        format='%(asctime)s - %(levelname)s - %(message)s')
  #+end_src

  Чтобы знать именно наши результаты,
  нужно сначала авторизоваться в системе и получить нужные куки,
  но сначала надо получить наши логин и пароль, если мы указали их в отдельном файле
  #+name: get_secrets
  #+begin_src python
    def get_secrets():
        if os.path.isfile(CONFIG_PATH):
            with open(CONFIG_PATH, 'r') as fd:
                config = fd.readlines()
            return parse_config(config)
        raise IOError("%s is absent!" % CONFIG_PATH)

    def parse_config(config):
        JUDGE_ID = ""
        PASSWORD = ""
        judgeid_regexp = re.compile(r'^JUDGE_ID')
        password_regexp = re.compile(r'^PASSWORD')
        sort_by_regexp = re.compile(r'^SORTED')
        comment_regexp = re.compile(r'^#')
        for line in config:
            if comment_regexp.match(line):
                continue
            if judgeid_regexp.match(line):
                JUDGE_ID = line.split(':')[1].strip()
            if password_regexp.match(line):
                PASSWORD = line.split(':')[1].strip()
            if sort_by_regexp.match(line):
                SORT_BY = line.split(':')[1].strip()
        return JUDGE_ID, PASSWORD, SORT_BY

    try:
        JUDGE_ID, PASSWORD, SORT_BY = get_secrets()
    except IOError, e:
        JUDGE_ID = "MYID"
        PASSWORD = "PASSWORD"
        SORT_BY = 'num'

  #+end_src
  Необходимо установить все Cookie: русскую локаль и добавить систему хранения
  куков авторизации  — CookieJar
  #+name: get_cookies
  #+begin_src python
    def get_opener():
        global OPENER
        if OPENER:
            return OPENER
        cj = CookieJar()
        ck = Cookie(version=0, name='Locale', value='Russian', port=None,
                    port_specified=False, domain='acm.timus.ru',
                    domain_specified=False, domain_initial_dot=False, path='/',
                    path_specified=True, secure=False, expires=None,
                    discard=True, comment=None, comment_url=None,
                    rest={'HttpOnly': None}, rfc2109=False)
        cj.set_cookie(ck)
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
        data = urllib.urlencode({"Action": "edit",
                                 "JudgeID": JUDGE_ID,
                                 "Password": PASSWORD})
        response = opener.open(AUTH_URL, data)
        OPENER = opener
        return opener
  #+end_src

  Получаем сырой xhtml
  #+name: get_data
  #+begin_src python
    fd = get_opener().open(TASKS_URL)
  #+end_src

  И затем скармливаем его lxml и получаем тело страницы
  #+name: to_xml
  #+begin_src python
    doc = html.fromstring(fd.read())
  #+end_src

  Каждая запись задачи хранится в элементе tr с классом /content/
  #+name: get_content
  #+begin_src python
    raw_tasks_list = doc.body.find_class('content')
  #+end_src

  Мы будем хранить наши записи в списке вида
  [Номер(Integer), статус(True|False), название(String), стоимость(Integer)]
  Среди прочих нам попадётся строчка таблицы заголовок, её нужно пропустить
  #+name: create_tasks_list
  #+begin_src python
    tasks_list = []
    for task in raw_tasks_list:
        if task[0].tag == 'th':
            continue
        tasks_list += [get_task_line(task)]
  #+end_src

  Заполнять задачи будем в следующем порядке:
  1. Если в первом /td/ содержится изображение "ok.gif" -- задача выполнена
  2. Второй /td/ содержит номер задачи
  3. Третий /td/ содержит название задачи
  4. Четвёртый и пятый /td/ мы пропускаем
  5. Пятый /td/ содержит стоимость задания

  #+name: get_task_line
  #+begin_src python
    def get_task_line(task):
        """
        XMLElement -> [String, Bool, String, String]
        """
        status, num, name, _, _, price = task.getchildren()
        if status.find('a') is not None:
            status = 'ok.gif' in status.find('a').find('img').attrib.get('src')
        else:
            status = False
        return [num.text_content(), status, name.text_content(), price.text_content()]
     #+end_src

  Осталось записать результат в org-file
  #+name: create_org
  #+begin_src python
    def create_task(num, status, name, price):
        document[num] = Task(num, status, name, price)

    for task in tasks_list:
        create_task(*task)

    for task in sorted(document,
                       key=lambda x: int(document[x].__getattribute__(SORT_BY))):
        template += "\n"
        template += document[task].get_task()

    with open('./tasks_list.org', 'w') as org_file:
        org_file.write(template.encode('utf-8'))

  #+end_src

  Для хранения всего документа создадим класс записей задач
  #+name: objects
  #+begin_src python
    document = {}

    class Task(object):

        def __init__(self, num, status, name, price):
            self.num = int(num)
            self.status = status
            self.name = name
            self.price = price

        @property
        def url(self):
            return PROBLEM_URL + "?num=%d" % self.num

        def __str__(self):
            return u"{num} {status} {name} {price}".format(
                num=self.num, status=self.status, name=self.name,
                price=self.price)

        <<get_task>>

        <<get_problem>>
  #+end_src

  Функция, возвращающая для каждой задачи запись в org-файл
  #+name: get_task
  #+begin_src python
    def get_task(self):
        return u"""* {status} {name:<40}:{price}:\n{problem}\n{curl_query}""".format(
            status=self.status and u"DONE" or u"TODO", name=self.name,
            price=self.price, problem=self.get_problem(),
            curl_query=u"{curl-query}")
  #+end_src

  Получаем описание задачи с сайта
  #+name: get_problem
  #+begin_src python
    def table_to_org(self, table):
        return table.text_content()

    def get_problem(self):
        opener = get_opener()
        doc = html.fromstring(opener.open(self.url).read())
        problem_text = u""
        try:
            problem_body = doc.xpath("//div[contains(@id,'problem_text')]")[0]
        except IndexError:
            logging.debug('Problem no. {num} has no problem text'.format(num=self.num))
        else:
            for element in problem_body:
                if element.tag == "div":
                    if 'problem_source' in element:
                        continue
                    problem_text += u"{text}\n".format(
                        text=element.text_content())
                elif element.tag == "h3":
                    problem_text += u"** {text}\n".format(
                        text=element.text_content())
                elif element.tag == "table":
                    problem_text += u"{text}\n".format(
                        text=self.table_to_org(element))
        finally:
            return problem_text
  #+end_src
